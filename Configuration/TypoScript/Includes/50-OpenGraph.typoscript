####################################################################
# OpenGraph
####################################################################
lib.txCoreExtended {

	openGraphImage = COA
	openGraphImage {

        // teaser image with fallbacks
        10 = FILES
        10 {

            references {
                table = pages
                data = levelmedia : -1, slide
                override.data =  levelfield : -1, tx_coreextended_preview_image, slide
                override.required = 1
                override.override.data =  levelfield : -1, tx_coreextended_og_image, slide
                override.override.required = 1
            }
            maxItems = 1

            renderObj = COA
            renderObj {

                // we need to use register here because inside GIFBUILDER "file" is not available
                10 = LOAD_REGISTER
                10 {
                   OgImageFileUid = TEXT
                   OgImageFileUid.data = file:current:uid
                }


                // load publisher into register
                11 = LOAD_REGISTER
                11 {
                    OgImagePublisher = TEXT
                    OgImagePublisher {
                        data = file:current:tx_coreextended_publisher
                        noTrimWrap = | / ||
                        noTrimWrap.if.isTrue.data = file:current:tx_coreextended_publisher
                    }
                }

                # load name of source, combine it with publisher and load it into register
                12 = RECORDS
                12 {
                    source.data = file:current:tx_coreextended_source
                    dontCheckPid = 1
                    tables = tx_coreextended_domain_model_mediasources

                    # load name of source but only if it is set and not an internal source
                    conf.tx_coreextended_domain_model_mediasources = COA
                    conf.tx_coreextended_domain_model_mediasources {
                        10 = LOAD_REGISTER
                        10 {
                            OgImageMediaSource = TEXT
                            OgImageMediaSource {
                                data = field:name

                                stdWrap.noTrimWrap = |Â© |{register:OgImagePublisher}|
                                stdWrap.insertData = 1

                                # only if there is a name and the publisher is not internal
                                if.isTrue.data = field:name
                                if.isTrue.if.isFalse.data = field:internal
                            }
                        }
                    }
                }

                20 = IMG_RESOURCE
                20 {

                    file = GIFBUILDER
                    file {

                        // define format and size
                        // see: https://developers.facebook.com/docs/sharing/best-practices#images
                        XY = 1200,630
                        format = jpg

                        // add image
                        10 = IMAGE
                        10 {
                            file {
                                import.data = register:OgImageFileUid
                                width = 1200c
                                height = 630c
                                treatIdAsReference = 1
                            }
                        }

                        // add copyright information
                        20 = TEXT
                        20 {
                            text.data = register:OgImageMediaSource
                            fontColor = #ffffff
                            fontSize = 20
                            offset = [10.w]-[20.w]+5,[10.h]-15
                            angle = 90
                            niceText = 1

                            shadow.offset = 2,2
                            shadow.blur = 20
                            shadow.opacity = 100
                        }

                        // add watermark
                        30 = IMAGE
                        30 {
                            file = {$plugin.tx_coreextended.settings.openGraph.imageWatermark}
                            offset = 20,20
                            height = 40
                            if.isTrue.data = {$plugin.tx_coreextended.settings.openGraph.imageWatermark}
                        }
                    }
                }

                90 = RESTORE_REGISTER
            }
        }
	}

    #=================================================================================

    openGraph = COA
    openGraph {

        10 = TEXT
        10.value = <meta property="og:type" content="article" />

        20 = TEXT
        20 {
            value = {$plugin.tx_coreextended.settings.openGraph.locale}
            wrap = <meta property="og:locale" content="|" />
        }

        30 = COA
        30 < lib.txCoreExtended.titleTag
        30 {

            30 >
            stdWrap.wrap = <meta property="og:title" content="|" />
            stdWrap.htmlSpecialChars = 1
        }

        40 = TEXT
        40 {
            value = {$plugin.tx_coreextended.settings.openGraph.websiteName}
            wrap = <meta property="og:site_name" content="|" />
            stdWrap.htmlSpecialChars = 1
        }

        50 = TEXT
        50 {
            description.data = levelfield:-1, abstract, slide
            description.override {
                field = description
                if.isTrue.field = description
            }
            wrap = <meta property="og:description" content="|" />
            stdWrap.htmlSpecialChars = 1
        }

        60 = COA
        60 {

            10 = COA
            10 < lib.txCoreExtended.openGraphImage

            # We add a timestamp here - maybe this prevents linkedIn from caching old images
            20 = TEXT
            20  {
                data = date:U
                strftime = %s
                noTrimWrap = |?t=||
            }

            stdWrap.wrap = <meta property="og:image" content="{$plugin.tx_coreextended.settings.openGraph.websiteUrl}|">
            stdWrap.required = 1
        }

        # 70 = TEXT
        # 70 {
        #	value = https://www.facebook.com/EXAMPLE
        #	wrap = <meta property="article:publisher" content="|" />
        # }
    }
}


#=============================================================
# Additions based on loaded extensions
#=============================================================
[extensionLoaded('rkw_infographics')]
    lib.txCoreExtended {

    	openGraphImage = COA
    	openGraphImage {

            10 {
                references {

                    override.override.cObject = FILES
                    override.override.cObject {
                        references {
                            table = tx_rkwinfographics_domain_model_infographic
                            uid.data = gp:tx_rkwinfographics_infographics|infographic
                            uid.insertData = 1
                            fieldName = image_social
                        }

                        begin = 0
                        maxItems = 1
                        required = 1

                        renderObj = TEXT
                        renderObj {
                            data = file:current:uid
                        }
                        if.isTrue.data = GP:tx_rkwinfographics_infographics|infographic
                    }
                }
            }
        }
    }
[END]
